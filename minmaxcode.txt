function botMove() {
  if (!gameactive) return;

  const bestMove = getBestMove();
  if (bestMove !== null) {
    arr[bestMove] = currentmove;
    cells[bestMove].textContent = currentmove;

    if (checkwin()) {
      showMessage(`${currentmove} wins!`);
      gameactive = false;
      return;
    }

    if (checkdraw()) {
      showMessage("It's a draw!");
      gameactive = false;
      return;
    }

    currentmove = 'X'; // Switch back to player's turn
  }
}

function getBestMove() {
  let bestScore = -Infinity;
  let move = null;

  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === '') {
      arr[i] = 'O'; // Simulate bot's move
      const score = minimax(arr, 0, false); // Get the score of this move
      arr[i] = ''; // Undo the move

      if (score > bestScore) {
        bestScore = score;
        move = i;
      }
    }
  }

  return move;
}

function minimax(board, depth, isMaximizing) {
  // Check for terminal states
  if (checkWinner('O')) return 10 - depth; // Bot wins
  if (checkWinner('X')) return depth - 10; // Player wins
  if (checkdraw()) return 0; // Draw

  // Maximizing bot's turn
  if (isMaximizing) {
    let bestScore = -Infinity;
    for (let i = 0; i < board.length; i++) {
      if (board[i] === '') {
        board[i] = 'O'; // Simulate bot's move
        const score = minimax(board, depth + 1, false); // Recursively evaluate
        board[i] = ''; // Undo the move
        bestScore = Math.max(score, bestScore);
      }
    }
    return bestScore;
  }

  // Minimizing player's turn
  else {
    let bestScore = Infinity;
    for (let i = 0; i < board.length; i++) {
      if (board[i] === '') {
        board[i] = 'X'; // Simulate player's move
        const score = minimax(board, depth + 1, true); // Recursively evaluate
        board[i] = ''; // Undo the move
        bestScore = Math.min(score, bestScore);
      }
    }
    return bestScore;
  }
}

function checkWinner(player) {
  return win.some(combination => {
    const [a, b, c] = combination;
    return arr[a] === player && arr[b] === player && arr[c] === player;
  });
}
